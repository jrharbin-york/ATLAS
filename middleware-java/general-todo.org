* DONE Have the requests from MOOS flowing over ActiveMQ to the CI - CI custom hooks are being called

* DONE pShare/nodebroker/nodecomms need to be set up to see vehicles on pMarineViewer
* DONE Helm is coming up in the state MALCONFIG - crashes approximately 12.5 seconds later? Behaviour problems?
  CLOSED: [2020-01-07 Tue 18:55]

* DONE Read through the proposal again and check I'm on the right track
* DONE CI code generator - how does it have to be structured, one CI class per robot? Check with Nikos
  CLOSED: [2020-02-10 Mon 12:32]
* DONE Generate a superclass per robot and subclass for each particular robot identity - allowing
  CLOSED: [2020-01-29 Wed 00:38]
behaviour customisation per individual robots
* DONE Also a CI class for the shoreside
  CLOSED: [2020-01-29 Wed 00:38]
** TODO CI hooks - need to define how the CI will operate - e.g. what calls can it make?
*** Just for now send MOOS commands directly

* DONE Middleware has to convert MOOS notifications into an general ATLAS form - SensorDetection or GPSPositionLocation
  CLOSED: [2020-01-30 Thu 15:13]
* DONE MOOS topologies have to contain position sensor component - to report to the CI as a sensor - 
  CLOSED: [2020-02-12 Wed 02:10]
       for now I have converted it so the true robot position updates from MOOS are reported to the CI as notifications
* DONE Draw a full diagram interpretation
* TODO Assumptions that are hardcoded into the MOOS code generation have to be checked
* DONE Proper object serialisation between the middleware and CI
  CLOSED: [2020-01-30 Thu 16:43]
* DONE CI behaviour layer to specify the CI responses independently
  CLOSED: [2020-02-12 Wed 02:10]
* TODO Threading behaviour with a central queue for receptions from the MOOS side
* TODO MOOS-specific side of middleware needs to be "lifted" to use generated code

* DONE Error report from deserialising on the CI side - not a valid field?
  CLOSED: [2020-02-03 Mon 14:24] - worked around with changes to jackson to ignore extra fields
DEBUG: deserialise - className = atlassharedclasses.SonarDetection raw json = {"robotName":"ella"}
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "robotName" (class atlassharedclasses.SonarDetection), not marked as ignorable (0 known properties: ])
 at [Source: (String)"{"robotName":"gilda"}"; line: 1, column: 15] (through reference chain: atlassharedclasses.SonarDetection["robotName"])
handleMessage caught: atlassharedclasses.ATLASObjectMapper$ATLASFormatError
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:840)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1206)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1592)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1570)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:294)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at atlassharedclasses.ATLASObjectMapper.deserialise(ATLASObjectMapper.java:40)
	at atlascollectiveintgenerator.CollectiveIntActiveMQConsumer.handleMessage(CollectiveIntActiveMQConsumer.java:42)
	at atlascollectiveintgenerator.CollectiveIntActiveMQConsumer.run(CollectiveIntActiveMQConsumer.java:79)
	at atlascollectiveintgenerator.CollectiveInt.startCI(CollectiveInt.java:22)
	at atlascollectiveintgenerator.runner.CollectiveIntRunner.main(CollectiveIntRunner.java:9)
atlassharedclasses.ATLASObjectMapper$ATLASFormatError
	at atlassharedclasses.ATLASObjectMapper.deserialise(ATLASObjectMapper.java:44)
	at atlascollectiveintgenerator.CollectiveIntActiveMQConsumer.handleMessage(CollectiveIntActiveMQConsumer.java:42)
	at atlascollectiveintgenerator.CollectiveIntActiveMQConsumer.run(CollectiveIntActiveMQConsumer.java:79)
	at atlascollectiveintgenerator.CollectiveInt.startCI(CollectiveInt.java:22)
	at atlascollectiveintgenerator.runner.CollectiveIntRunner.main(CollectiveIntRunner.java:9)

* TODO Can we have the robots be activated by the CI so we don't have to press DEPLOY? - not yet


* TODO Need to get the CI implemented for next week
** DONE Collective intelligence logging in CILog 
   CLOSED: [2020-02-03 Mon 15:29]
** DONE Ensure the CI code is backed up regularly to Github to avoid deletion
   CLOSED: [2020-02-04 Tue 16:32]
** DONE How to handle the robot definitions in the CI - for now, they are just encoded with the identity as assumed in the test case
   CLOSED: [2020-02-12 Wed 02:11]
** DONE Reverse channel from the CI to MOOSDB for variable updates
   CLOSED: [2020-02-04 Tue 18:03]
** TODO Change the topic so the CI can communicate directly with the relevant MOOSDB for now
** TODO Timers for the CI - for now, the timers will be triggered at the next event polling
** DONE Need to exclude any robots which are currently confirming from participating in the confirmation
   CLOSED: [2020-02-12 Wed 02:11]
** DONE Check with Simos about an algorithm for the coverage/just a simple rectangle for now
   CLOSED: [2020-02-11 Tue 16:48]

* TODO Generate a stub loader using EGL which produces the Java objects
* TODO Metamodels for the other languages
* TODO Obtaining the time from the DB updates? - use the DB_UPTIME variable from the shoreside MOOSDB (DB_TIME is the Unix time from DB)
* DONE Polygon coords list sent to MOOS is empty - why? - fixed by rewriting the polygon generator code
  CLOSED: [2020-02-07 Fri 14:26]
* TODO Points go outside the official region? - check the coord list conversion

* TODO The middleware has to see the forwarded CI requests so the faults can be injected there
** DONE The CI requests must be passed as serialised Behaviour objects (subclasses of Behaviour) to the middleware
   CLOSED: [2020-02-11 Tue 16:48]
** DONE The middleware has to have an ATLASEventQueue monitoring communications from the CI - Finish the conversion of these in the middleware - in CIEventQueue.handleEvent
** TODO Then relay out the corresponding MOOS variable updates from the CI into the DB
** TODO Types e.g. CIEvent may need to be handled in the conversion software
** TODO Check that the logger is working in the ATLASEventQueue - is it logging all events when they flow through the queue

* DONE What does the fault injector send to the middleware
  CLOSED: [2020-02-11 Tue 02:11]
Generates a FaultInstance object which specifies
The exact time or time range of a particular fault 

* DONE Register additional objects in ATLASSharedResult
  CLOSED: [2020-02-11 Tue 16:40]
* DONE Middleware MQ is expecting MOOSEvent objects - this type needs to receive BehaviourCommands
  CLOSED: [2020-02-11 Tue 16:47]

* DONE ActiveMQ port conversion - the link from the CI to the application should be 
ActiveMQ port named the name of the relevant vehicle? Or by the CI location?
If it is the CI location, then it is necessary for the messages to include the
particular port name in the messages.
No, lets use individual ports/producers/consumer links for the different vehicles
  CLOSED: [2020-02-11 Tue 16:41]

* DONE The CI is dispatching the original vehicle to verify! Fix
  CLOSED: [2020-02-12 Wed 02:10]

* DONE Get the subfield code implemented in MutateMessage
  CLOSED: [2020-02-12 Wed 11:50]
* DONE Got the GUI injection of the overspeed fault working! (permanent fault so far)

* DONE Avoidance between the robots - activating the avoidance behaviour from the case study
  CLOSED: [2020-02-16 Sun 23:55]
* DONE Write abstract
  CLOSED: [2020-02-17 Mon 00:39]
* DONE 3 diagrams - one of the broad system structure, another of the middleware structure, MOOS communicaties
  CLOSED: [2020-02-17 Mon 05:02]
* DONE Update project plan
  CLOSED: [2020-02-17 Mon 05:17]


* DONE Check over the report generally tomorrow
  CLOSED: [2020-02-19 Wed 15:00]
* DONE Virtual machine file format
  CLOSED: [2020-02-19 Wed 15:00]
* DONE Ideally some more images for the instructions - no time
  CLOSED: [2020-02-19 Wed 15:00]
* DONE Videos and links (how to deliver them?)
  CLOSED: [2020-02-19 Wed 15:00]

* TODO Heterogeneity in the case study


** DONE Different speeds expressed in the DSL - encode the speed within startSpeed and maxSpeed properties
   CLOSED: [2020-02-24 Mon 18:31]
** DONE Different sensor capabilities - different swath widths for the sensors
   CLOSED: [2020-02-26 Wed 16:29] - DSL can set the sensor swath widths via a property
** TODO Different sensor false positive/negative probabilities
*** Swath width may be dynamically reset - provides an additional opportunity for faults
** DONE Extracting timing information from MOOS and passing it onto the CI
   CLOSED: [2020-02-26 Wed 16:30]
** TODO Updating the CI algorithm - a stack of assigned actions per robot
** TODO Faults expiring or being deleted after a specific end time
** TODO Mission monitoring component - goals structure and the geometrical tracker for coverage goals
** TODO The mission definition - faults will mean that the robots don't find anything in that area
*** Rotate the non-verifying robots around the fault areas after a time interval
*** Use a timer to re-assign the verifying robots after a specific time has expired

* TODO Work after week off
** DONE Dependency tracking for the goals - avoid verifySweep going to COMPLETED status before custom regions have been setup
   CLOSED: [2020-03-30 Mon 14:52]
** DONE EGL generated mission code in GeneratedDSLLoader should include the dependencies between goals (is it in the model?)
   CLOSED: [2020-03-30 Mon 16:11]
** DONE Fix residual errors in GeneratedDSLLoader - use goal name instead of num for participants
   CLOSED: [2020-03-30 Mon 17:00]
** DONE Regions/Environmental objects needs to be included in EGL and metamodel
   CLOSED: [2020-03-30 Mon 23:45]
** DONE GeneratedDSLLoader now working - features can be edited in model editor 
and generated as MOOS code
   CLOSED: [2020-03-30 Mon 23:46]
** TODO Fix the sensor coverage region tracking timing semantics - should only count one reading per time interval - not each mission monitor polling
** TODO Vehicle trajectories are not set up properly by the CI - is exceeding the boundaries of the regions - fix
** TODO CI should use a timing limit for verification - activity stack per robot - they return to their original action after?
** TODO Are the dynamic regions being set up properly for verification goal?
** TODO Which robot is required to confirm? Dynamic participants need to be set to use a different robot?
** TODO Expanded fault generations - new fault types, faults from file, automated fault mutations


* Notes for meeting on Thursday 2nd Apr
** Got the menu-based scenario generator working (it produces a Java definition of the DSL objects)
*** I had some problems with it generating invalid code when there was a goal with a static region that contained an abstract class
reference to a Region. it would produce models that could not be re-opened with
the menu-based editor. I worked around it temporarily restricting the regions used internal to 
Rectangles (since the low-level code only contains Rectangles).
** Then can generate MOOS scenarios corresponding to these menu-based definitions and run it (this is currently working)
** I have produced an EGL code generator which produces the core MOOS middleware interfacing according to the
object definition. e.g. if it contains a sensor, it will produce code to translate these into low-level middleware interactions. 
There may still be some MOOS components to sort out 
Mentions the bits of the code that need modifications
** I have the mission monitor working for goals Avoidance and SensorCover
*** The mission monitor contains the DSL objects representing the Goals and iterates over them on each update step, checking 
*** There was a problem with MOOS in which it internally does not respect the avoidance goal if the vehicles are placed in a 
*** Need to add some debugging, particularly for the behaviour and logging
** TODO Next steps - to work on the fault generator, and particularly the fault mutation
** TODO Me: Start an Overleaf outline of MODELS paper
** TODO Next meeting in 2 weeks, keep in touch via email or individual comms
*** Want to submit full paper - 8th May - 10 pages and 2 more for references
*** Mention workshop paper - 4 page paper
*** Track: Practice and Innovation
*** Structure - should resemble the things described in the report
General overview - Simulation testing and model-based testing in general
Model driven techniques can accelerate development
Overview of the DSL and the object diagrams - methodology - show what the users need to input
Software development
Will be much stronger with both Gazebo and MOOS - at least with instructions on how to extend to other simulators
Evaluation: showing finding faults in a simple scenario for the system
Related work
Conclusions and future work

Web page for the project - video of the project in operation

Generate hooks for fault injection - with the message information
Random mutation of existing faults
Evaluation and logging of the success

DSL contains e.g. reliability parameter
Core fixed, flexible behaviour or fixed faults
*** Should we run seperate instances of the simulator, middleware, rather than mutating faults on the fly?
Should be able to build a totally headless run
MOOSDB logger will give information on this
** Seperate questions for the ATLAS report
** I have made some updates to the online Overleaf questions in response to DSTL replies
** TODO Do we have to update the report date too?
** TODO Check with Nikos - conditions of supply of the software?
** TODO Upload a new version of the virtual machine

** Can get extension for 1 month - which will correspond to date of the MODELS conference 
Integration with Gazebo would be important for impact - work out the mapping for these concepts and check that
these are valid

* Structure for the fault generation
** DONE Emfatic description for the fault layer - provides general description of permissable faults
** TODO EGL translation into GeneratedDSL java loaders
** TODO Check the consistency between my Java classes and the EGL
** TODO Fault specialiser - Flat-file format (or model translation) that provides specific info for one test
*** e.g. provides exact time of faults
** TODO Fault generator reads both of these
** TODO Fault mutation (generates offline or up-front one of the specifics)
