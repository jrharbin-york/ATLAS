[* For key based fuzzing generation *]
[* For component-based fuzzing:
should we use the component-based selection after all, instead of individual keys?
If we are using algorithm replacement, yes, we will need to
For now, represent it with a key-based fuzzing for the entry

TODO: put the participants in the simmapping database and validate them against the choice
TODO: validate the variable spec in a message is actually a message field

TODO: extract the participants from the model... For now, we are just returning a static string

TODO: do we need this for registering plugin... from the help page
context.getNativeTypeDelegates().add(new ExtensionPointToolNativeTypeDelegate());

*]
[% for (fexpt in FuzzingExpt!FuzzingExperiment.allInstances()) {
	var dirChosen = Simmapping!VariableDirection#INBOUND; 
	for (sel in fexpt.sels) {
		if (sel.isKindOf(FuzzingExpt!VariableFuzzingSelection)) { 
			generateVariableEntry(sel);
		}
		if (sel.isKindOf(FuzzingExpt!ComponentFuzzingSelection)) { 
			if (GENERATE_COMPONENT_AS_INDIVIDUAL_KEYS) {
				generateComponentEntriesAsKeys(sel, dirChosen);
			} else {
				generateComponentEntries(sel, dirChosen);
			}
		}
		if (sel.isKindOf(FuzzingExpt!MessageFuzzingSelection)) {
			generateMessageEntry(sel);
		}
	}
}
%]
[%
operation generateVariableEntry(sel) {
	var v = sel.varChoice;
	var variable = v.variable;
	var participants = getParticipantsAsList(sel);
	var regexNum = 0;
	if (v.vtype.isKindOf(Simmapping!RegexpVariableType)) {
		regexNum = v.vtype.groupNumToReplace;
	}

	var opString = chooseFuzzingOperationFromList(variable.opParams);
%]Key,[%= variable %],[%= participants %],[%= regexNum %],[%= opString %]
[% } %]

[* Generates a variable entry based upon the variable specification *]
[%
operation generateVariableEntryFromVariable(v,participantsString) {
	var regexNum = 0;
	if (v.vtype.isKindOf(Simmapping!RegexpVariableType)) {
		regexNum = v.vtype.groupNumToReplace;
	}
	var opString = chooseFuzzingOperationFromList(v.opParams, v);
%]Key,[%= v.variable %],[%= participantsString %],[%= regexNum %],[%= opString %]
[% } %]


[%
operation generateComponentEntries(sel, dir) {
	var c = sel.componentChoice;
	var cname = c.name; 
	var participants = getParticipantsAsList(sel);
	var opString = chooseFuzzingOperationAsString(sel);
%]Component,[%= cname %],[%= participants %],[%= dir %],[%= opString %]
[% } %]

[%
operation generateComponentEntriesAsKeys(sel, dirChosen) {
	var c = sel.componentChoice;
	var cname = c.name; 
	var participantsString = getParticipantsAsList(sel);
	var opString = chooseFuzzingOperationAsString(sel);

	for (variable in c.vars) {
		if (variable.dir = dirChosen) {
			generateVariableEntryFromVariable(variable, participantsString);
		}	
	}
} 
%]

[%
operation generateMessageEntry(sel) {
	var m = sel.msgChoice;
	var msg = m.messageRef;
	var mname = msg.name;
	var messageFields = m.vars;
	for (mfieldspec in messageFields) {
		var regexNum = 0;
		var opString = chooseFuzzingOperationAsString(sel);
		var varname = mfieldspec.variable;
		if (mfieldspec.vtype.isKindOf(Simmapping!RegexpVariableType)) {
			regexNum = mfieldspec.vtype.groupNumToReplace;
		}		
%]Message,[%= mname %],[%= varname %],[%= regexNum %],[%= opString %]
[%	 }
}
%]

[%
operation getParticipantsAsList(sel) : String {
	var pChoice = sel.participantChoice;
	var s = "";	
	if (pChoice.isKindOf(FuzzingExpt!SpecificParticipantChoice)) {
		for (p in pChoice.participants) {
			s = s + p.name;
		}
	} else {
		// Otherwise, add all pariticpants from the model
		for (p in Mission!NamedComponent.allInstances()) {
			s = s + p.name;
		}
	}
	
	return s;
}
%]
[* TODO: return the fuzzing engine and suitable parameters as a string 
For now just returning a constant
*]

[%
operation randomValueZeroToOne() {
	var sampleTool = new Native("org.eclipse.epsilon.examples.tools.RandomGenForEGL");
	return sampleTool.genRandom();
}

operation paramsToString(paramList) {
	var ps = "";
	if (paramList.size() > 0) {
		ps = ps + ",";
		for (param in paramList) {
			
			// Constant params are merely entered directly
			if (param.isKindOf(Simmapping!DoubleConstantOperationParameter)) {
				ps = ps + param.value;
			}
			
			if (param.isKindOf(Simmapping!IntConstantOperationParameter)) {
				ps = ps + param.value;
			}
			
			if (param.isKindOf(Simmapping!StringConstantOperationParameter)) {
				ps = ps + param.value;
			}
			
			if (param.isKindOf(Simmapping!DoubleListOperationParameter)) {
				ps = ps + param.values.random();
			}
			
			if (param.isKindOf(Simmapping!IntListOperationParameter)) {
				ps = ps + param.values.random();
			}
			
			if (param.isKindOf(Simmapping!StringListOperationParameter)) {
				ps = ps + param.values.random();
			}
			
			if (param.isKindOf(Simmapping!DoubleRangeOperationParameter)) {
				// TODO: fix integration with Java
				//ps = ps + param.lower + randomValueZeroToOne() * param.upper - param.lower;
				ps = ps + param.upper;
			}
			
			if (param.isKindOf(Simmapping!IntRangeOperationParameter)) {
				// TODO: fix integration with Java
				//ps = ps + param.upper + randomValueZeroToOne() * param.upper -  param.lower;
				ps = ps + param.upper;
			}
			
			ps = ps + "|";
		}
	}
	return ps;
}

operation chooseFuzzingOperationAsString(sel) : String {
	var allOpParams = sel.opParams;
	return chooseFuzzingOperationFromList(allOpParams, sel);
}

operation chooseFuzzingOperationFromList(allOpParams, error_name) : String {
	// TODO: choose one element at random	
	var chosenOpParamSet = allOpParams.random();
	var s = "";
	
	if (chosenOpParamSet.isDefined()) {
		s = chosenOpParamSet.parent.operationClassName;
	} else {
		throw ("Error in simmapping model: no opParams given in simmmapping model for " + error_name + ":" + chosenOpParamSet);
	}
	s = s + paramsToString(chosenOpParamSet.params);
	return s;
}
%]