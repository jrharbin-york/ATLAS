[% out.setContentType("Java"); %]

public class GeneratedDSLLoader implements DSLLoader {
	public Mission loadMission() {
		
	[% for (m in M!Mission.allInstances()) { %]
	Mission mission = new Mission();
	[% for (r in m.robots) { %]
		Robot r = new Robot("[%= r.name %]");
		[* Extract the necessary properties for r
		// Set the properies for r *]
		[% for (p in r.componentProperties) { %]
			[% if (p.isKindOf(IntProperty)) { %]
		r.setIntComponentProperty("[%= p.name %]", [%= p.value %]);
			[% } %]
			[% if (p.isKindOf(DoubleProperty)) { %]
		r.setDoubleComponentProperty("[%= p.name %]", [%= p.value %]);
			[% } %]
			[% if (p.isKindOf(PointProperty)) { %]
		r.setPointComponentProperty("[%= p.name %]", new Point([%= p.value.x %],[%= p.value.y %],[%= p.value.z %]));
		[* TODO: better way of doing point conversion here? *]
			[% } %]
		[% } %]
		
		[* Add subcomponents to the robots *]
		[% for (subc in r.subcomponents) { %]
		[* TODO: need to handle other types of subcomponents, actuators etc *]
			[% if (subc.isKindOf(Sensor)) { %]
		Sensor s = new Sensor(SensorType.[%= subc.type %]);
				[* set subcomponent properties here *]
				[% for (sp in subc.componentProperties) { %]
				[* TODO: factor this property pocessing into a subroutine call? *]
					[% if (sp.isKindOf(IntProperty)) { %]
		s.setIntComponentProperty("[%= sp.name %]", [%= sp.value %]);
					[% } %]
					[% if (sp.isKindOf(DoubleProperty)) { %]
		s.setDoubleComponentProperty("[%= sp.name %]", [%= sp.value %]);
					[% } %]
				[% } %]
		r.addSubcomponent(s);
			[% } %]
		[% } %]
			
		[* Add the robot to the mission *]
		mission.addRobot(r);
	[%} %] [* end Robot loop *]
	
	[% for (g in m.goals) { %]
		[% if (g.participants.isKindOf(StaticParticipants)) { %]
		GoalParticipants gp = new StaticParticipants([%= g.participants.participants %], mission);
		[% } %]
		[% if (g.participants.isKindOf(RelativeParticipants)) { %]
		GoalParticipants gp = new RelativeParticipants(StaticParticipants.Spec.ALL_ROBOTS, mission);
		[% } %]
		
		[% var goalTemp = g.requirements; %]
		[* TODO: handle goal dependencies here *]
		GoalTemporalConstraints gt = new GoalTemporalConstraints([%= goalTemp.earliestStartTime %], [%= goalTemp.latestFinishTime %]);
		
		[* Goal actions *]
		[% var goalAction = g.action; %]
		[% if (goalAction.isKindOf(SensorCover)) { %]
		GoalAction ga = new SensorCover([%= goalAction.density %], [%= goalAction.samplesPerUnit %], [%= goalAction.sensortype %]);
		[% } %]
		[% if (goalAction.isKindOf(Avoid)) { %]
		GoalAction ga = new AvoidOthers(AVOIDANCE_CLEARANCE)
		[% } %]
		Goal [%= g.name %] = new Goal("[%= g.name %]", mission, gt, gp, Optional.empty(), ga);
		mission.addGoal("[%= g.name %]", [%= g.name %]);
	[% } %]
	
	[%} %] [* end Mission loop *]
	return Mission;
	}
}