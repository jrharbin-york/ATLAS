[% out.setContentType("Java"); %]
package atlasdsl.loader;

import atlasdsl.*;
import atlasdsl.faults.*;
import atlassharedclasses.*;
import java.util.Optional;

public class GeneratedDSLLoader implements DSLLoader {
	public Mission loadMission() throws DSLLoadFailed {
		
	[% for (m in M!Mission.allInstances()) { %]
	[% var robotNum = 0; %]
	Mission mission = new Mission();
	
	[% for (c in m.computers) { %]
	[% var computerNum = 0; %]
	Computer c[%= computerNum %] = new Computer("[%= c.name %]");
	mission.addComputer(c[%= computerNum %]);
	[% } %]
	
	[% for (r in m.robots) { %]
		[% var robotName = "r" + r.name; %]
		Robot [%= robotName %] = new Robot("[%= r.name %]");
		[* Extract the necessary properties for r
		Set the properies for r *]
		[% for (p in r.componentProperties) { %]
			[% if (p.isKindOf(IntProperty)) { %]
		[%= robotName %].setIntComponentProperty("[%= p.name %]", [%= p.value %]);
			[% } %]
			[% if (p.isKindOf(DoubleProperty)) { %]
		[%= robotName %].setDoubleComponentProperty("[%= p.name %]", [%= p.value %]);
			[% } %]
			[% if (p.isKindOf(PointProperty)) { %]
		[%= robotName %].setPointComponentProperty("[%= p.name %]", new Point([%= p.value.x %],[%= p.value.y %],[%= p.value.z %]));
		[* TODO: better way of doing point conversion here? *]
			[% } %]
		[% } %]
		
		[* Add subcomponents to the robots *]
		[% for (subc in r.subcomponents) { %]
			[% var subCNum = 0; %]
			[% var sensorID = "s" + robotName + "_" + subCNum++; %] 
		[* TODO: need to handle other types of subcomponents, actuators etc *]
			[% if (subc.isKindOf(Sensor)) { %]
		Sensor [%= sensorID %] = new Sensor(SensorType.[%= subc.type %]);
				[* set subcomponent properties here *]
				[% for (sp in subc.componentProperties) { %]
				[* TODO: factor this property pocessing into a subroutine call? *]
					[% if (sp.isKindOf(IntProperty)) { %]
		[%= sensorID %].setIntComponentProperty("[%= sp.name %]", [%= sp.value %]);
					[% } %]
					[% if (sp.isKindOf(DoubleProperty)) { %]
		[%= sensorID %].setDoubleComponentProperty("[%= sp.name %]", [%= sp.value %]);
					[% } %]
				[% } %]
		[%= robotName %].addSubcomponent([%= sensorID %]);
			[% } %]
		[% } %]
			
		[* Add the robot to the mission *]
		mission.addRobot([%= robotName %]);
	[%} %] [* end Robot loop *]
	
	[% var goalnum = 0; %]
	[% for (g in m.goals) { %]
		[% goalnum++; %]
		[% var goalName = g.name; %]
		[% if (g.participants.isKindOf(StaticParticipants)) { %]
			[% var allNames = ""; %]
			[% for (participantRobot in g.participants.participants) { %]
				[% allNames = allNames + "r" + participantRobot.name + ","; %] 
			[% } %]
			[* Strip off the final comma from the end of it *]
			[% var allNamesLen = allNames.length(); %]
			[% allNames = allNames.substring(0, allNamesLen-1); %]
		
		Robot [] grp[%= goalnum%] = {[%= allNames %]}; 
		GoalParticipants gp[%= goalName %] = new StaticParticipants(grp[%= goalnum %], mission);
		[% } %]
		
		[% if (g.participants.isKindOf(RelativeParticipants)) { %]
		[% var parentGoal = g.participants.parentGoal.name; 
		   var logicOps = g.participants.setOperation;
		   var fieldName = g.participants.fieldName;
		   var limit = g.participants.participantLimit;
		%]
	
		[* RelativeParticipants(Goal parentGoal, StaticParticipants staticRobots, String fieldName, LogicOps operation, int participantLimit) { *]
		GoalParticipants gp[%= goalName %] = new RelativeParticipants([%= parentGoal %], (StaticParticipants)gp[%= parentGoal %], "[%= fieldName %]", RelativeParticipants.LogicOps.[%= logicOps %], [%= limit %]);
		[% } %]
		
		[% var goalTemp = g.requirements; %]
		
		GoalTemporalConstraints gt[%= goalnum %] = new GoalTemporalConstraints([%= goalTemp.earliestStartTime %], [%= goalTemp.latestFinishTime %]);
		
		[* Goal actions *]
		[% var goalAction = g.action; %]
		[% if (goalAction.isKindOf(SensorCover)) { %]
		GoalAction ga[%= goalnum %] = new SensorCover([%= goalAction.density %], [%= goalAction.samplesPerUnit %], SensorType.[%= goalAction.sensortype %]);
		[% } %]
		
		[% if (goalAction.isKindOf(AvoidOthers)) { %]
		GoalAction ga[%= goalnum %] = new AvoidOthers([%= goalAction.clearance %]);
		[% } %]
		
		[% var goalRegion = g.region; %]
		[% if (goalRegion.isKindOf(StaticGoalRegion)) { %]
		[% var sr = goalRegion.staticRegion; %]
		GoalRegion gr[%= goalName %] = new StaticGoalRegion(
			new Region(new Point([%= sr.corner1.x %], [%= sr.corner1.y %], [%= sr.corner1.z %]),
			           new Point([%= sr.corner2.x %], [%= sr.corner2.y %], [%= sr.corner2.z %])));
		[% } %]
		
		[% if (goalRegion.isKindOf(DynamicGoalRegion)) { %]
		[% var parentGoal = goalRegion.relativeToGoal; %]
		GoalRegion gr[%= goalName %] = new DynamicGoalRegion([%= parentGoal.name %], "[%= goalRegion.relativeToGoalField %]", [%= goalRegion.relativeRange %]);
		[% } %]
		
		Goal [%= goalName %] = new Goal("[%= g.name %]", mission, gt[%= goalnum %], gp[%= goalName %], Optional.of(gr[%= goalName %]), ga[%= goalnum %]);
		
		[* Register goal dependencies - need an exception handler around this if any dependencies
		   are inserted *]
		[% if (g.requirements.dependencies.size > 0) { %]
		try {
			[% for (dep in g.requirements.dependencies) { %]
			[%= goalName %].setDependencyOn([%= dep.name %]);
			[% } %]
		} catch (SelfDependencyError e) {
			throw new DSLLoadFailed();
		}
		[% } %]
		
		mission.addGoal("[%= g.name %]", [%= g.name %]);
	[% } %]
	
	[* Add environmental objects *]
	[% for (o in m.objects) { %]
	mission.addObject(new EnvironmentalObject([%= o.label %], new Point([%= o.x %],[%= o.y %],[%= o.z %]), [%= o.isHazard %]));
	[% } %]
	
	[* Add messages - naming schema msg[name] *]
	
	[* Add the fault information *]
	[% var faultNum = 0; %]
	[% for (f in m.faults) { %]
	[% faultNum++; %]
	[% if (f.impact.isKindOf(DelayMessage)) { %]
	FaultImpact fi[%= faultNum %] = new DelayMessage(msg[%= f.impact.affectedMessage.name %], [%= f.impact.delayLength %]);
	[% } %]
	
	[% if (f.impact.isKindOf(DeleteMessage)) { %]
	FaultImpact fi[%= faultNum %] = new DeleteMessage(msg[%= f.impact.affectedMessage.name %]);
	[% } %]
	
	[% if (f.impact.isKindOf(MotionFault)) { %]
	[* TODO: need to lookup a component name in these DSL objects here... *]
	FaultImpact fi[%= faultNum %] = new MotionFault(msg[% f.impact.affectedComponent; %]);
	[* should verify that the component is a motion source - (Robot r, String affectedProperty, String newValue) *]
	[% } %]
	
	[% if (f.impact.isKindOf(EnergyLoss)) { %]
	[* TODO: need to lookup a component name in these DSL objects here... *]
	FaultImpact fi[%= faultNum %] = new EnergyLoss(msg[% f.impact.affectedComponent; %], [%= f.impact.fixedEnergyLoss %], [%= f.impact.powerDraw %]);
	[% } %]
	
	[% if (f.impact.isKindOf(DisabledComponent)) { %]
	[* TODO: need to lookup a component name in these DSL objects here... *]
	FaultImpact fi[%= faultNum %] = new DisabledComponent([% f.impact.affectedComponent; %]);
	[% } %]
	
	[% var ft = f.affectedTime; %]
	FaultTimeProperties ft[%= faultNum %] = new FaultTimeProperties([%= ft.faultStart %], [%= ft.faultLength %], [%= ft.faultPeriod %], [%= ft.faultRepeatCount %]); 
	
	[* TODO: fault regions are not currently expressed here *]
	Fault f[%= faultNum %] = new Fault(fi[%= faultNum %], Optional.empty(), ft[%= faultNum %]);
	mission.addFault(f[%= faultNum %]);
	[% } %]
	
	[%} %] [* end Mission loop *]
	return mission;
	}
}