[% out.setContentType("Java"); %]
[* Need parameters in the run configuration: 
simName to specify the simulator name
fuzzFileName gives the fuzzing definition file *]
package fuzzingengine.spec;

import java.util.Optional;
import atlasdsl.Mission;

import fuzzingengine.*;
public class GeneratedFuzzingSpec {

	public static FuzzingEngine createFuzzingEngine(Mission m) {
	FuzzingEngine fe = new FuzzingEngine(m);
	FuzzingSimMapping simMapping = new FuzzingSimMapping();
	
[% for (s in SimMapping!Simulator.allInstances()) { %]
	[% if (s.name == simName) { %]
	[% var baseDir = s.baseDirectory; %]
		[% for (comp in s.components) { %]
		[% var cnature = "FuzzingSimMapping.FuzzingNature.NO_MODIFICATIONS";
		   var classstring = "Optional.empty()";
	   	   var crelpathstr = "Optional.empty()"; %]
		[% 	if (comp.nature.isKindOf(BinaryFuzzing)) {
				cnature = "FuzzingSimMapping.FuzzingNature.BINARY";
				classstring = "Optional.empty()";
				crelpathstr = "Optional.of(\"" + baseDir + "/" + comp.componentRelativePath + "\")";
			} %]
		
	simMapping.setComponentFuzzingInfo("[%= comp.name %]", [%= cnature %], [%= classstring %], [%= crelpathstr %]);
		
			[% for (vspec in comp.vars) { %]
				[% var c = comp; %]
				[% var vt = vspec.vtype; %]
	simMapping.addRecord("[%= c.name %]", "[%= vspec.variable %]", "[%= vspec.reflectionName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], Optional.of("[%= baseDir %]/[%= c.componentRelativePath %]"),
	[% if (vt.isKindOf(RegexpVariableType)) { %]
		Optional.of("[%= vt.regexp %]")
	[% } else { %]
		Optional.empty()
	[% } %]
	);
		[% } %]
		[% } %]
	[% } %]
	[% } %]
	
	[* Add simulator message variables *]
	[% for (mref in SimMapping!MessageReferences.allInstances()) { %]
		[% var mname = mref.messageName; %]	
		[% for (vspec in mref.vars) { %]
			[% var c = vspec.component; 
			   var cname;
			   var crelpathstr;
			   var reflectName;
			%]
			[% if (c.isDefined()) {
				cname = c.name;
				crelpathstr = "Optional.of(" + c.componentRelativePath + ")";
			} else {
				cname = "NULL-" + mname;
				crelpathstr = "Optional.empty()";
			}
			 %]
			 
			 [* auto-prime if not defined *]
			 [% if (not (vspec.reflectionName.isDefined())) { %]
			 	reflectName = vspec.variable + "'";
			 [% } %]
			[% var vt = vspec.vtype; %]
	
	simMapping.addRecord("[%= cname %]", "[%= vspec.variable %]", "[%= vspec.reflectionName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], [%= crelpathstr %],
	[% if (vt.isKindOf(RegexpVariableType)) { %]
		Optional.of("[%= vt.regexp %]")
	[% } else { %]
		Optional.empty()
	[% } %]
	);

	
		[% } %]
	[% } %]
	
	fe.setSimMapping(simMapping);
	fe.setupFromFuzzingFile("[%= fuzzFileName %]", m);
	return fe;
	}
}