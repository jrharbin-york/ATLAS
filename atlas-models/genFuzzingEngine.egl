[% out.setContentType("Java"); %]
package fuzzingengine.spec;

import java.util.Optional;
import fuzzingengine.*;
import fuzzingengine.operations.*;

[* Load this information when loading the Mission
The info has to be loaded and present at the start during code generation
The FuzzingEngine object is loaded when the middleware core is created
Then the FuzzingEngine can be asked to perform the corresponding code generation operations based upon its code

	// TODO: need to generate the following
	public void setFuzzingContent(FuzzingEngine fuzzEngine) {
	FuzzingOperation nullOp = new NullFuzzingOperation();
	FuzzingOperation thrustFuzz = NumericVariableChangeFuzzingOperation.RandomOffset(-20.0, 20.0);
	FuzzingOperation rudderFuzz = NumericVariableChangeFuzzingOperation.RandomOffset(-50.0, 50.0);
	
	fuzzEngine.addFuzzingOperation("DESIRED_THRUST", Optional.of("DEZIRED_THRUST"), Optional.of("uSimMarine"), thrustFuzz, BINARY);
	fuzzEngine.addFuzzingOperation("DESIRED_RUDDER", Optional.of("DEZIRED_RUDDER"), Optional.of("uSimMarine"), rudderFuzz, BINARY);
	fuzzEngine.addFuzzingOperation("DESIRED_ELEVATOR", Optional.of("DEZIRED_ELEVATOR"), Optional.of("uSimMarine"), nullOp, BINARY);
	}
	
The FuzzingEngine has to contain the information on how to encode the binary information
FuzzingEngine - get binary specifications
	
*]

public class GeneratedFuzzingSpec {
	public static FuzzingEngine createFuzzingEngine() {
	FuzzingEngine fe = new FuzzingEngine();
	FuzzingSimMapping simMapping = new FuzzingSimMapping();
	
[% for (s in SimMapping!Simulator.allInstances()) { %]
	
	[* TODO: always do MOOS-IVP for now, generalise to other simulators later *]
	[% if (s.name == "MOOS-IVP") { %]
		[% var baseDir = s.baseDirectory; %]
			[% for (vspec in s.vars) { %]
			[% var c = vspec.component; %]
	simMapping.addRecord("[%= c.name %]", "[%= vspec.variable %]", "[%= vspec.reflectionName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], Optional.of("[%= baseDir %]/[%= c.componentRelativePath %]"));
		[% } %]
	[% } %]
		
	[% for (f in Fuzzing!FuzzingInfoRecord.allInstances()) { %]
		//FIR;
	[% } %]
	
	
[% } %]
	
	fe.setSimMapping(simMapping); 
	return fe;
	}
}