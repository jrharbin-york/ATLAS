@namespace(uri="http://www.github.com/jrharbin-york/atlas-middleware/dsl/mission", prefix="mis")
package Atlas;

import "platform:/resource/com.github.atlas.dsl/components.ecore";
import "platform:/resource/com.github.atlas.dsl/region.ecore";

class GoalResultField {
	attr String name;
}

class IntResultField extends GoalResultField {
	attr int value;
}

class StringResultField extends GoalResultField {
	attr String value;
}

class FloatResultField extends GoalResultField {
	attr float value;
}

class RobotResultField extends GoalResultField {
	
}

class PointResultField extends GoalResultField {
	
}

class GoalResult {
	val GoalResultField[0..*] contents;	
}

abstract class GoalAction {
	
}

class Visit extends GoalAction {
	
}

class Patrol extends GoalAction {
	
}

class Cover extends GoalAction {
	
}

class Avoid extends GoalAction {
	
}

class AvoidOthers extends GoalAction {
	attr double clearance;
}

class SensorCover extends Cover {
	attr double density;
	val Atlas.SensorType[*] sensortype;
}

class CollectiveSensorCover extends Cover {
	
}

abstract class GoalParticipants {
	
}

enum logicOps {
	ADD = 1;
	SUBTRACT = 2;
}

class RelativeParticipants extends GoalParticipants {
	attr logicOps setOperation;
	val RobotResultField robotResults;
}

class StaticParticipants extends GoalParticipants {
	val Atlas.Robot[*] pariticpants;
}

class GoalTemporalConstraints {
	val Goal[*] dependenecies;
	attr double earliestStartTime;
	attr double latestFinishTime;
}

class Goal {
	val GoalTemporalConstraints requirements;
	val GoalParticipants partipants;
	val Goal[*] subgoals;
	val GoalAction action;
}

class Mission {
	val Atlas.Robot[*] robots;
	val Atlas.Computer[*] computers;
	val Atlas.Region[*] regions;
	val Goal[*] goals;
}