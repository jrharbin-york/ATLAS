@namespace(uri="http://www.github.com/jrharbin-york/atlas-middleware/dsl/system", prefix="atlas")
package Atlas;

import "http://www.github.com/jrharbin-york/atlas-middleware/dsl/components";
import "http://www.github.com/jrharbin-york/atlas-middleware/dsl/region";
import "http://www.github.com/jrharbin-york/atlas-middleware/dsl/message";
import "http://www.github.com/jrharbin-york/atlas-middleware/dsl/faults";

// System mapping model: map abstract components (under ATLAS component layer) to real process implementations
// Abstract sensor may be depedent on multiple processes on different robots!
// For components, specify the variables they contain and their links from source to dest
// System mapping model: links to these

class SystemModel {
	val Simulator[*] sims;
}

class Simulator {
	attr String name;
	val SimEntity[*] entities;
}

class SimEntity {
	attr String name;
	// enum for is robot or not?
}

class LowLevelComponent {
	attr String name;
	// is process or not
	ref Atlas.Component[*] generalComponents;
	val ComponentImplementation[*]#parent impls; 
}

// For, e.g. handling multiple implementations of an algorithm
class ComponentImplementation {
	readonly ref LowLevelComponent[1]#impls parent;
	attr String path; // or other identifying details for name
}

class CommunicationChannel {
	LowLevelComponent[1..*] sources;
	LowLevelComponent[1..*] dests;
	val Variables[*] vars;
	ref Atlas.Message[1] generalMessage; // link a comms channel to a general message
}

class Variable {
	attr String variable;
	val VariableType vtype;
	// Formatting information
}

// How to represent e.g. vname=<>,width=<>,pd=<>
// Variable has multiple fields in a CSV, each is a seperate field in a message? Seperate channel




